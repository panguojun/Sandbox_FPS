using UnityEngine;using System.Collections;using System;using System.Runtime.InteropServices;// --------------------------------// PMDLL// --------------------------------public class PMDLL{	[DllImport("PMDLL")]    public static extern void setup();    [DllImport("PMDLL")]    public static extern int getnexttri(Vector3[] v, int vcnt, int[] t, int tcnt, int tri1);    [DllImport("PMDLL")]    public static extern bool colorface(Color32[] vcor, int vcnt, int[] t, int tcnt, int tri1, int tri2, Color32 cor);    [DllImport("PMDLL")]    public static extern bool setface(Vector3[] v, int[] t, int tcnt, int tri1, int tri2, Vector3[] pt);    [DllImport("PMDLL")]    public static extern int editface(int type, Vector3[] v, int vcnt, int[] t, int tcnt, Color32[] vcor, int tri1, int tri2, Vector3 campos, Vector3 startpos, Vector3 updir, float hitdis);    [DllImport("PMDLL")]    public static extern int editfacetri(int type, Vector3[] v, int vcnt, int[] t, int tcnt, Color32[] vcor, int tri1, Vector3 campos, Vector3 startpos, Vector3 updir, float hitdis);    [DllImport("PMDLL")]    public static extern int triangleArt(int type, Vector3[] v, int vcnt, int[] t, int tcnt, Color32[] vcor, int tri1, Vector3 startpos);    [DllImport("PMDLL")]    public static extern int triangleArt3D(int type, Vector3[] v, int vcnt, int[] t, int tcnt, Color32[] vcor, int tri1, Vector3 startpos);    [DllImport("PMDLL")]    private static extern bool createmesh(int type, int dat, Vector3 worldpos);    [DllImport("PMDLL")]    private static extern bool createmeshex(int type, Vector3 o, Vector3 up, int dat);    [DllImport("PMDLL")]    private static extern bool robotarm(int type, Vector3 v1, Vector3 v2, float len1, float len2, float t);    [DllImport("PMDLL")]    private static extern bool line3D(Vector3 p1, Vector3 p2, Vector3 cam, float wid);    [DllImport("PMDLL")]    private static extern bool worm(int ind, Vector3 p1, Vector3 p2, float t, float sz = 0.005F);    [DllImport("PMDLL")]    private static extern bool coelenterate(Vector3 o, Vector3 v, float s, float t,          int n,  // 体节数        int aa, // 触角数        int an  // 触角节数        );    [DllImport("PMDLL")]    private static extern bool araceae(int type, Vector3 o, Vector3 v, float s,    int n,      int aa,     int an      );    [DllImport("PMDLL")]    private static extern bool growing_plant(int type, Vector3 o, Vector3 v, float s, float t);    [DllImport("PMDLL")]    private static extern void invnorm(int[] t, int tcnt);    [DllImport("PMDLL")]    private static extern int getVcnt();    [DllImport("PMDLL")]    private static extern bool getVdata(Vector3[] v);    [DllImport("PMDLL")]    private static extern bool getCdata(Color32[] c);        [DllImport("PMDLL")]    private static extern int getTcnt();    [DllImport("PMDLL")]    private static extern bool getTdata(int[] v);    [DllImport("PMDLL")]    public static extern int gettargetcnt();    [DllImport("PMDLL")]    public static extern bool getTargets(Vector3[] p);    [DllImport("PMDLL")]    public static extern void converVecs2Bytes(Vector3[] src, byte[] des, int sz);    [DllImport("PMDLL")]    public static extern void converInts2Bytes(int[] src, byte[] des, int sz);    [DllImport("PMDLL")]    public static extern void converCors2Bytes(Color32[] src, byte[] des, int sz);    [DllImport("PMDLL")]    public static extern void setInt(int i);    [DllImport("PMDLL")]    public static extern void setUInt(Color32 i);    [DllImport("PMDLL")]    public static extern Color32 getUInt();    [DllImport("PMDLL")]    public static extern void setReal(float f);    [DllImport("PMDLL")]    public static extern void setReal2(float f);    [DllImport("PMDLL")]    public static extern void setVec(Vector3 v);    [DllImport("PMDLL")]    public static extern int getInt();    [DllImport("PMDLL")]    public static extern float getReal();    [DllImport("PMDLL")]    public static extern float getReal2();    [DllImport("PMDLL")]    public static extern Vector3 getVec();    [DllImport("PMDLL")]    public static extern void resetmanualside();    [DllImport("PMDLL")]    public static extern int getmanualside();    [DllImport("PMDLL")]    public static extern void setmanualside(int side);    [DllImport("PMDLL")]    public static extern int getdraglen();    [DllImport("PMDLL")]    public static extern int getdragwid();    [DllImport("PMDLL")]    public static extern int getdraghgt();    [DllImport("PMDLL")]    public static extern int getclipA();    [DllImport("PMDLL")]    public static extern int getclipB();    [DllImport("PMDLL")]    public static extern bool export3DS(int meshid);    // --------------------------------    public static bool getCppVdata(Mesh m)    {        int sz = getVcnt();        if (sz == 0)            return false;       // Debug.Log("getCppVdata: " + sz.ToString());        Vector3[] dat = new Vector3[sz];        if(getVdata(dat))        {            m.vertices = dat;            return true;        }        return false;    }    // --------------------------------    public static bool getCppCdata(Mesh m)    {        int sz = getVcnt();        if (sz == 0)            return false;        //Debug.Log("getCppCdata: " + sz.ToString());        Color32[] dat = new Color32[sz];        if (getCdata(dat))        {            m.colors32 = dat;            return true;        }        return false;    }    public static bool getCppTdata(Mesh m)    {        int sz = getTcnt();       // Debug.Log("getCppTdata: " + sz.ToString());        int[] dat = new int[sz];        if (getTdata(dat))        {            m.triangles = dat;            return true;        }        return false;    }    public static void invNorm(Mesh m)    {        int[] dat = m.triangles;        PMDLL.invnorm(dat, m.triangles.Length);        m.triangles = dat;        m.RecalculateNormals();    }    public static void invNormEx(ref Mesh m)    {        int[] dat = m.triangles;        PMDLL.invnorm(dat, m.triangles.Length);        m.triangles = dat;        m.RecalculateNormals();    }    public static bool updateMesh(Mesh m)    {        m.Clear();        if (!getCppVdata(m))            return false;        if (!getCppTdata(m))            return false;        m.RecalculateBounds();        m.RecalculateNormals();                return true;    }    public static bool updateMeshEx(Mesh m)    {        m.Clear();        if (!getCppVdata(m))            return false;        if (!getCppCdata(m))            return false;        if (!getCppTdata(m))            return false;        m.RecalculateBounds();        m.RecalculateNormals();        return true;    }    public static bool createMesh(GameObject go, int type, int dat = 0)	{        //Debug.Log("createMesh： " + go.name);        MeshFilter mf = go.GetComponent<MeshFilter>();                if (!createmesh(type, dat, go.transform.position))            return false;        return updateMeshEx(mf.mesh);    }    public static bool createMeshEx(GameObject go, int type, Vector3 o, Vector3 up, int dat = 0)    {        Debug.Log("createmeshex： " + go.name);        MeshFilter mf = go.GetComponent<MeshFilter>();        if (!createmeshex(type, o, up, dat))            return false;        return updateMeshEx(mf.mesh);    }    public static bool robotArm(GameObject go, Vector3 v1, Vector3 v2, float len1, float len2, float t)    {       // Debug.Log("robotArm");        MeshFilter mf = go.GetComponent<MeshFilter>();        if (!robotarm(1, v1, v2, len1, len2, t))            return false;        return updateMesh(mf.mesh);    }    public static bool line3D(GameObject go, Vector3 p1, Vector3 p2, Vector3 campos, float wid)    {      //  Debug.Log("line3D");        MeshFilter mf = go.GetComponent<MeshFilter>();        if (!line3D(p1, p2, campos, wid))            return false;        return updateMesh(mf.mesh);    }    public static bool worm(GameObject go, int ind, Vector3 p1, Vector3 p2, float t)    {        // Debug.Log("robotArm");        MeshFilter mf = go.GetComponent<MeshFilter>();        if (!worm(ind, p1, p2, t, 0.01f))            return false;        return updateMesh(mf.mesh);    }    public static bool coelenterate(GameObject go, Vector3 o, Vector3 v, float s, float t,    int n,  // 体节数    int aa, // 触角数    int an  // 触角节数        )    {        MeshFilter mf = go.GetComponent<MeshFilter>();        if (!coelenterate(o, v, s, t, n, aa, an))            return false;        return updateMesh(mf.mesh);    }    public static bool araceae(GameObject go, int type, Vector3 o, Vector3 v, float s,    int n,      int aa,     int an      )    {        MeshFilter mf = go.GetComponent<MeshFilter>();        if (!araceae(type, o, v, s, n, aa, an))            return false;        return updateMeshEx(mf.mesh);    }    // 庄稼    public static bool growing_plant(GameObject go, int type, Vector3 o, Vector3 v, float s, float t)    {        MeshFilter mf = go.GetComponent<MeshFilter>();        if (!growing_plant(type, o, v, s, t))            return false;        return updateMesh(mf.mesh);    }    }